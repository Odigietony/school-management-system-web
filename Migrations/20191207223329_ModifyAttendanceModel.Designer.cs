// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagementSystem.Data;

namespace SchoolManagementSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20191207223329_ModifyAttendanceModel")]
    partial class ModifyAttendanceModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Admin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("IdentityUserId");

                    b.Property<string>("ImagePath");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.AdminTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<long>("LocationId");

                    b.Property<DateTime>("Time");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("AdminTasks");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Attendance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CourseId");

                    b.Property<long>("CourseYearId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("IsPresent");

                    b.Property<string>("Remarks");

                    b.Property<long>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseYearId");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CountryName = "Afghanistan"
                        },
                        new
                        {
                            Id = 2L,
                            CountryName = "Albania"
                        },
                        new
                        {
                            Id = 3L,
                            CountryName = "Algeria"
                        },
                        new
                        {
                            Id = 4L,
                            CountryName = "Andorra"
                        },
                        new
                        {
                            Id = 5L,
                            CountryName = "Angola"
                        },
                        new
                        {
                            Id = 6L,
                            CountryName = "Antigua and Barbuda"
                        },
                        new
                        {
                            Id = 7L,
                            CountryName = "Argentina"
                        },
                        new
                        {
                            Id = 8L,
                            CountryName = "Armenia"
                        },
                        new
                        {
                            Id = 9L,
                            CountryName = "Australia"
                        },
                        new
                        {
                            Id = 10L,
                            CountryName = "Austria"
                        },
                        new
                        {
                            Id = 11L,
                            CountryName = "Azerbaijan"
                        },
                        new
                        {
                            Id = 12L,
                            CountryName = "Bahamas"
                        },
                        new
                        {
                            Id = 13L,
                            CountryName = "Bahrain"
                        },
                        new
                        {
                            Id = 14L,
                            CountryName = "Bangladesh"
                        },
                        new
                        {
                            Id = 15L,
                            CountryName = "Barbados"
                        },
                        new
                        {
                            Id = 16L,
                            CountryName = "Belarus"
                        },
                        new
                        {
                            Id = 17L,
                            CountryName = "Belgium"
                        },
                        new
                        {
                            Id = 18L,
                            CountryName = "Belize"
                        },
                        new
                        {
                            Id = 19L,
                            CountryName = "Benin"
                        },
                        new
                        {
                            Id = 20L,
                            CountryName = "Bolivia"
                        },
                        new
                        {
                            Id = 21L,
                            CountryName = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = 22L,
                            CountryName = "Botswana"
                        },
                        new
                        {
                            Id = 23L,
                            CountryName = "Brazil"
                        },
                        new
                        {
                            Id = 24L,
                            CountryName = "Bulgaria"
                        },
                        new
                        {
                            Id = 25L,
                            CountryName = "Burkina Faso"
                        },
                        new
                        {
                            Id = 26L,
                            CountryName = "Burundi"
                        },
                        new
                        {
                            Id = 27L,
                            CountryName = "Côte d'Ivoire"
                        },
                        new
                        {
                            Id = 28L,
                            CountryName = "Cambodia"
                        },
                        new
                        {
                            Id = 29L,
                            CountryName = "Cameroon"
                        },
                        new
                        {
                            Id = 30L,
                            CountryName = "Canada"
                        },
                        new
                        {
                            Id = 31L,
                            CountryName = "Central African Republic"
                        },
                        new
                        {
                            Id = 32L,
                            CountryName = "Chad"
                        },
                        new
                        {
                            Id = 33L,
                            CountryName = "Chile"
                        },
                        new
                        {
                            Id = 34L,
                            CountryName = "China"
                        },
                        new
                        {
                            Id = 35L,
                            CountryName = "Colombia"
                        },
                        new
                        {
                            Id = 36L,
                            CountryName = "Congo (Congo-Brazzaville)"
                        },
                        new
                        {
                            Id = 37L,
                            CountryName = "Costa Rica"
                        },
                        new
                        {
                            Id = 38L,
                            CountryName = "Croatia"
                        },
                        new
                        {
                            Id = 39L,
                            CountryName = "Cuba"
                        },
                        new
                        {
                            Id = 40L,
                            CountryName = "Cyprus"
                        },
                        new
                        {
                            Id = 41L,
                            CountryName = "Czechia (Czech Republic)"
                        },
                        new
                        {
                            Id = 42L,
                            CountryName = "Democratic Republic of the Congo"
                        },
                        new
                        {
                            Id = 43L,
                            CountryName = "Denmark"
                        },
                        new
                        {
                            Id = 44L,
                            CountryName = "Dominican Republic"
                        },
                        new
                        {
                            Id = 45L,
                            CountryName = "Ecuador"
                        },
                        new
                        {
                            Id = 46L,
                            CountryName = "Egypt"
                        },
                        new
                        {
                            Id = 47L,
                            CountryName = "El Salvador"
                        },
                        new
                        {
                            Id = 48L,
                            CountryName = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = 49L,
                            CountryName = "Ethiopia"
                        },
                        new
                        {
                            Id = 50L,
                            CountryName = "Fiji"
                        },
                        new
                        {
                            Id = 51L,
                            CountryName = "Finland"
                        },
                        new
                        {
                            Id = 52L,
                            CountryName = "France"
                        },
                        new
                        {
                            Id = 53L,
                            CountryName = "Gabon"
                        },
                        new
                        {
                            Id = 54L,
                            CountryName = "Gambia"
                        },
                        new
                        {
                            Id = 55L,
                            CountryName = "Georgia"
                        },
                        new
                        {
                            Id = 56L,
                            CountryName = "Germany"
                        },
                        new
                        {
                            Id = 57L,
                            CountryName = "Ghana"
                        },
                        new
                        {
                            Id = 58L,
                            CountryName = "Greece"
                        },
                        new
                        {
                            Id = 59L,
                            CountryName = "Guinea"
                        },
                        new
                        {
                            Id = 60L,
                            CountryName = "Guinea-Bissau"
                        },
                        new
                        {
                            Id = 61L,
                            CountryName = "Haiti"
                        },
                        new
                        {
                            Id = 62L,
                            CountryName = "Honduras"
                        },
                        new
                        {
                            Id = 63L,
                            CountryName = "Hungary"
                        },
                        new
                        {
                            Id = 64L,
                            CountryName = "Iceland"
                        },
                        new
                        {
                            Id = 65L,
                            CountryName = "India"
                        },
                        new
                        {
                            Id = 66L,
                            CountryName = "Indonesia"
                        },
                        new
                        {
                            Id = 67L,
                            CountryName = "Iran"
                        },
                        new
                        {
                            Id = 68L,
                            CountryName = "Iraq"
                        },
                        new
                        {
                            Id = 69L,
                            CountryName = "Ireland"
                        },
                        new
                        {
                            Id = 70L,
                            CountryName = "Israel"
                        },
                        new
                        {
                            Id = 71L,
                            CountryName = "Italy"
                        },
                        new
                        {
                            Id = 72L,
                            CountryName = "Jamaica"
                        },
                        new
                        {
                            Id = 73L,
                            CountryName = "Japan"
                        },
                        new
                        {
                            Id = 74L,
                            CountryName = "Jordan"
                        },
                        new
                        {
                            Id = 75L,
                            CountryName = "Kazakhstan"
                        },
                        new
                        {
                            Id = 76L,
                            CountryName = "Kenya"
                        },
                        new
                        {
                            Id = 77L,
                            CountryName = "Kuwait"
                        },
                        new
                        {
                            Id = 78L,
                            CountryName = "Liberia"
                        },
                        new
                        {
                            Id = 79L,
                            CountryName = "Libya"
                        },
                        new
                        {
                            Id = 80L,
                            CountryName = "Lithuania"
                        },
                        new
                        {
                            Id = 81L,
                            CountryName = "Madagascar"
                        },
                        new
                        {
                            Id = 82L,
                            CountryName = "Malawi"
                        },
                        new
                        {
                            Id = 83L,
                            CountryName = "Malaysia"
                        },
                        new
                        {
                            Id = 84L,
                            CountryName = "Mali"
                        },
                        new
                        {
                            Id = 85L,
                            CountryName = "Mauritania"
                        },
                        new
                        {
                            Id = 86L,
                            CountryName = "Mauritius"
                        },
                        new
                        {
                            Id = 87L,
                            CountryName = "Mexico"
                        },
                        new
                        {
                            Id = 88L,
                            CountryName = "Morocco"
                        },
                        new
                        {
                            Id = 89L,
                            CountryName = "Mozambique"
                        },
                        new
                        {
                            Id = 90L,
                            CountryName = "Myanmar (formerly Burma)"
                        },
                        new
                        {
                            Id = 91L,
                            CountryName = "Namibia"
                        },
                        new
                        {
                            Id = 92L,
                            CountryName = "Nepal"
                        },
                        new
                        {
                            Id = 93L,
                            CountryName = "Netherlands"
                        },
                        new
                        {
                            Id = 94L,
                            CountryName = "New Zealand"
                        },
                        new
                        {
                            Id = 95L,
                            CountryName = "Nicaragua"
                        },
                        new
                        {
                            Id = 96L,
                            CountryName = "Niger"
                        },
                        new
                        {
                            Id = 97L,
                            CountryName = "Nigeria"
                        },
                        new
                        {
                            Id = 98L,
                            CountryName = "North Korea"
                        },
                        new
                        {
                            Id = 99L,
                            CountryName = "Norway"
                        },
                        new
                        {
                            Id = 100L,
                            CountryName = "Oman"
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseCode");

                    b.Property<string>("CourseName");

                    b.Property<long>("CourseYearId");

                    b.Property<long>("DepartmentId");

                    b.HasKey("Id");

                    b.HasIndex("CourseYearId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.CourseYear", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("YearNumberRepresentation");

                    b.Property<string>("YearTitle");

                    b.HasKey("Id");

                    b.ToTable("CourseYears");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentCode");

                    b.Property<string>("DepartmentName");

                    b.Property<long>("FacultyId");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndTime");

                    b.Property<long>("EventCategoryId");

                    b.Property<int>("EventGuests");

                    b.Property<string>("Fee");

                    b.Property<string>("Image");

                    b.Property<long>("LocationId");

                    b.Property<string>("Speaker");

                    b.Property<string>("Sponsor");

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("EventCategoryId");

                    b.HasIndex("LocationId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.EventCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("EventCategories");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Faculty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FacultyCode");

                    b.Property<string>("FacultyName");

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AdminId");

                    b.Property<long>("LocationCategoryId");

                    b.Property<long>("Number");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("LocationCategoryId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.LocationCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("LocationCategories");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Message.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthourId");

                    b.Property<string>("Body");

                    b.Property<string>("DateAndTime");

                    b.Property<string>("IdentityUserId");

                    b.Property<bool>("IsDelivered");

                    b.Property<string>("Subject")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Message.MessageAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment");

                    b.Property<long>("MessageId");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageAttachments");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Message.ReceivedMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IdentityUserId");

                    b.Property<bool>("IsRead");

                    b.Property<long>("MessageId");

                    b.Property<string>("ReceiverId");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.HasIndex("MessageId");

                    b.ToTable("ReceivedMessages");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Referee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("EmailAddress")
                        .IsRequired();

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Organisation")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<long>("TeacherId");

                    b.HasKey("Id");

                    b.ToTable("Referees");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CountryId");

                    b.Property<string>("StateName");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CountryId = 1L,
                            StateName = "Kabul"
                        },
                        new
                        {
                            Id = 2L,
                            CountryId = 1L,
                            StateName = "Kandahar"
                        },
                        new
                        {
                            Id = 3L,
                            CountryId = 1L,
                            StateName = "Herat"
                        },
                        new
                        {
                            Id = 4L,
                            CountryId = 1L,
                            StateName = "Mazar-i-Sharif"
                        },
                        new
                        {
                            Id = 5L,
                            CountryId = 1L,
                            StateName = "Kabul"
                        },
                        new
                        {
                            Id = 6L,
                            CountryId = 1L,
                            StateName = "Jalalabad"
                        },
                        new
                        {
                            Id = 7L,
                            CountryId = 1L,
                            StateName = "Kunduz"
                        },
                        new
                        {
                            Id = 8L,
                            CountryId = 1L,
                            StateName = "Ghazni"
                        },
                        new
                        {
                            Id = 9L,
                            CountryId = 1L,
                            StateName = "Lashkargah"
                        },
                        new
                        {
                            Id = 10L,
                            CountryId = 1L,
                            StateName = "Taloqan"
                        },
                        new
                        {
                            Id = 11L,
                            CountryId = 2L,
                            StateName = "Tirana"
                        },
                        new
                        {
                            Id = 12L,
                            CountryId = 2L,
                            StateName = "Durrës"
                        },
                        new
                        {
                            Id = 13L,
                            CountryId = 2L,
                            StateName = "Vlorë"
                        },
                        new
                        {
                            Id = 14L,
                            CountryId = 2L,
                            StateName = "Elbasan"
                        },
                        new
                        {
                            Id = 15L,
                            CountryId = 2L,
                            StateName = "Shkodër"
                        },
                        new
                        {
                            Id = 16L,
                            CountryId = 2L,
                            StateName = "Fier"
                        },
                        new
                        {
                            Id = 17L,
                            CountryId = 2L,
                            StateName = "Kamëz"
                        },
                        new
                        {
                            Id = 18L,
                            CountryId = 2L,
                            StateName = "Korçë"
                        },
                        new
                        {
                            Id = 19L,
                            CountryId = 2L,
                            StateName = "Berat"
                        },
                        new
                        {
                            Id = 20L,
                            CountryId = 2L,
                            StateName = "Lushnjë"
                        },
                        new
                        {
                            Id = 21L,
                            CountryId = 3L,
                            StateName = "Algiers"
                        },
                        new
                        {
                            Id = 22L,
                            CountryId = 3L,
                            StateName = "Oran"
                        },
                        new
                        {
                            Id = 23L,
                            CountryId = 3L,
                            StateName = "Constantine"
                        },
                        new
                        {
                            Id = 24L,
                            CountryId = 3L,
                            StateName = "Annaba"
                        },
                        new
                        {
                            Id = 25L,
                            CountryId = 3L,
                            StateName = "Blida"
                        },
                        new
                        {
                            Id = 26L,
                            CountryId = 3L,
                            StateName = "Batna"
                        },
                        new
                        {
                            Id = 27L,
                            CountryId = 3L,
                            StateName = "Djelfa"
                        },
                        new
                        {
                            Id = 28L,
                            CountryId = 3L,
                            StateName = "Sétif"
                        },
                        new
                        {
                            Id = 29L,
                            CountryId = 3L,
                            StateName = "Sidi Bel Abbès"
                        },
                        new
                        {
                            Id = 30L,
                            CountryId = 3L,
                            StateName = "Biskra"
                        },
                        new
                        {
                            Id = 31L,
                            CountryId = 4L,
                            StateName = "Canillo"
                        },
                        new
                        {
                            Id = 32L,
                            CountryId = 4L,
                            StateName = "L'Aldosa"
                        },
                        new
                        {
                            Id = 33L,
                            CountryId = 4L,
                            StateName = "L'Armiana"
                        },
                        new
                        {
                            Id = 34L,
                            CountryId = 4L,
                            StateName = "Bordes d'Envalira"
                        },
                        new
                        {
                            Id = 35L,
                            CountryId = 4L,
                            StateName = "El Forn"
                        },
                        new
                        {
                            Id = 36L,
                            CountryId = 4L,
                            StateName = "Incles"
                        },
                        new
                        {
                            Id = 37L,
                            CountryId = 4L,
                            StateName = "Meritxell"
                        },
                        new
                        {
                            Id = 38L,
                            CountryId = 4L,
                            StateName = "Molleres"
                        },
                        new
                        {
                            Id = 39L,
                            CountryId = 4L,
                            StateName = "Els Plans"
                        },
                        new
                        {
                            Id = 40L,
                            CountryId = 4L,
                            StateName = "Prats"
                        },
                        new
                        {
                            Id = 41L,
                            CountryId = 5L,
                            StateName = "Ambriz"
                        },
                        new
                        {
                            Id = 42L,
                            CountryId = 5L,
                            StateName = "Andulo"
                        },
                        new
                        {
                            Id = 43L,
                            CountryId = 5L,
                            StateName = "Bailundo"
                        },
                        new
                        {
                            Id = 44L,
                            CountryId = 5L,
                            StateName = "Balombo"
                        },
                        new
                        {
                            Id = 45L,
                            CountryId = 5L,
                            StateName = "Baía Farta"
                        },
                        new
                        {
                            Id = 46L,
                            CountryId = 5L,
                            StateName = "Benguela"
                        },
                        new
                        {
                            Id = 47L,
                            CountryId = 5L,
                            StateName = "Bibala (Vila Arriaga)"
                        },
                        new
                        {
                            Id = 48L,
                            CountryId = 5L,
                            StateName = "Bimbe"
                        },
                        new
                        {
                            Id = 49L,
                            CountryId = 5L,
                            StateName = "Biula"
                        },
                        new
                        {
                            Id = 50L,
                            CountryId = 5L,
                            StateName = "Bungo"
                        },
                        new
                        {
                            Id = 51L,
                            CountryId = 6L,
                            StateName = "All Saints"
                        },
                        new
                        {
                            Id = 52L,
                            CountryId = 6L,
                            StateName = "Bolans"
                        },
                        new
                        {
                            Id = 53L,
                            CountryId = 6L,
                            StateName = "Carlisle, Saint George"
                        },
                        new
                        {
                            Id = 54L,
                            CountryId = 6L,
                            StateName = "Carlisle, Saint Philip"
                        },
                        new
                        {
                            Id = 55L,
                            CountryId = 6L,
                            StateName = "Clare Hall"
                        },
                        new
                        {
                            Id = 56L,
                            CountryId = 6L,
                            StateName = "Cedar Grove"
                        },
                        new
                        {
                            Id = 57L,
                            CountryId = 6L,
                            StateName = "Codrington"
                        },
                        new
                        {
                            Id = 58L,
                            CountryId = 6L,
                            StateName = "Dickenson Bay"
                        },
                        new
                        {
                            Id = 59L,
                            CountryId = 6L,
                            StateName = "English Harbour"
                        },
                        new
                        {
                            Id = 60L,
                            CountryId = 6L,
                            StateName = "Falmouth"
                        },
                        new
                        {
                            Id = 61L,
                            CountryId = 7L,
                            StateName = "Buenos Aires"
                        },
                        new
                        {
                            Id = 62L,
                            CountryId = 7L,
                            StateName = "Catamarca"
                        },
                        new
                        {
                            Id = 63L,
                            CountryId = 7L,
                            StateName = "Chaco"
                        },
                        new
                        {
                            Id = 64L,
                            CountryId = 7L,
                            StateName = "Chubut"
                        },
                        new
                        {
                            Id = 65L,
                            CountryId = 7L,
                            StateName = "Cordoba"
                        },
                        new
                        {
                            Id = 66L,
                            CountryId = 7L,
                            StateName = "Currents"
                        },
                        new
                        {
                            Id = 67L,
                            CountryId = 7L,
                            StateName = "Between Rivers"
                        },
                        new
                        {
                            Id = 68L,
                            CountryId = 7L,
                            StateName = "Formosa"
                        },
                        new
                        {
                            Id = 69L,
                            CountryId = 7L,
                            StateName = "Jujuy"
                        },
                        new
                        {
                            Id = 70L,
                            CountryId = 7L,
                            StateName = "La Pampa"
                        },
                        new
                        {
                            Id = 71L,
                            CountryId = 8L,
                            StateName = "Aragatsotn"
                        },
                        new
                        {
                            Id = 72L,
                            CountryId = 8L,
                            StateName = "Ararat"
                        },
                        new
                        {
                            Id = 73L,
                            CountryId = 8L,
                            StateName = "Armavir"
                        },
                        new
                        {
                            Id = 74L,
                            CountryId = 8L,
                            StateName = "Gegharkunik"
                        },
                        new
                        {
                            Id = 75L,
                            CountryId = 8L,
                            StateName = "Kotayk"
                        },
                        new
                        {
                            Id = 76L,
                            CountryId = 8L,
                            StateName = "Lori"
                        },
                        new
                        {
                            Id = 77L,
                            CountryId = 8L,
                            StateName = "Shirak"
                        },
                        new
                        {
                            Id = 78L,
                            CountryId = 8L,
                            StateName = "Syunik"
                        },
                        new
                        {
                            Id = 79L,
                            CountryId = 8L,
                            StateName = "Tavush"
                        },
                        new
                        {
                            Id = 80L,
                            CountryId = 8L,
                            StateName = "Vayots Dzor"
                        },
                        new
                        {
                            Id = 81L,
                            CountryId = 9L,
                            StateName = "Sydney"
                        },
                        new
                        {
                            Id = 82L,
                            CountryId = 9L,
                            StateName = "Melbourne"
                        },
                        new
                        {
                            Id = 83L,
                            CountryId = 9L,
                            StateName = "Brisbane"
                        },
                        new
                        {
                            Id = 84L,
                            CountryId = 9L,
                            StateName = "Perth"
                        },
                        new
                        {
                            Id = 85L,
                            CountryId = 9L,
                            StateName = "Adelaide"
                        },
                        new
                        {
                            Id = 86L,
                            CountryId = 9L,
                            StateName = "Gold Coast–Tweed Heads"
                        },
                        new
                        {
                            Id = 87L,
                            CountryId = 9L,
                            StateName = "Newcastle–Maitland"
                        },
                        new
                        {
                            Id = 88L,
                            CountryId = 9L,
                            StateName = "Canberra–Queanbeyan"
                        },
                        new
                        {
                            Id = 89L,
                            CountryId = 9L,
                            StateName = "Sunshine Coast"
                        },
                        new
                        {
                            Id = 90L,
                            CountryId = 9L,
                            StateName = "Wollongong"
                        },
                        new
                        {
                            Id = 91L,
                            CountryId = 10L,
                            StateName = "Vienna"
                        },
                        new
                        {
                            Id = 92L,
                            CountryId = 10L,
                            StateName = "Graz"
                        },
                        new
                        {
                            Id = 93L,
                            CountryId = 10L,
                            StateName = "Linz"
                        },
                        new
                        {
                            Id = 94L,
                            CountryId = 10L,
                            StateName = "Salzburg"
                        },
                        new
                        {
                            Id = 95L,
                            CountryId = 10L,
                            StateName = "Innsbruck"
                        },
                        new
                        {
                            Id = 96L,
                            CountryId = 10L,
                            StateName = "Klagenfurt"
                        },
                        new
                        {
                            Id = 97L,
                            CountryId = 10L,
                            StateName = "Villach"
                        },
                        new
                        {
                            Id = 98L,
                            CountryId = 10L,
                            StateName = "Wels"
                        },
                        new
                        {
                            Id = 99L,
                            CountryId = 10L,
                            StateName = "Sankt Pölten"
                        },
                        new
                        {
                            Id = 100L,
                            CountryId = 10L,
                            StateName = "Dornbirn"
                        },
                        new
                        {
                            Id = 101L,
                            CountryId = 11L,
                            StateName = "Agdash"
                        },
                        new
                        {
                            Id = 102L,
                            CountryId = 11L,
                            StateName = "Agjabadi"
                        },
                        new
                        {
                            Id = 103L,
                            CountryId = 11L,
                            StateName = "Agstafa"
                        },
                        new
                        {
                            Id = 104L,
                            CountryId = 11L,
                            StateName = "Agsu"
                        },
                        new
                        {
                            Id = 105L,
                            CountryId = 11L,
                            StateName = "Astara"
                        },
                        new
                        {
                            Id = 106L,
                            CountryId = 11L,
                            StateName = "Babek"
                        },
                        new
                        {
                            Id = 107L,
                            CountryId = 11L,
                            StateName = "Baku"
                        },
                        new
                        {
                            Id = 108L,
                            CountryId = 11L,
                            StateName = "Balakən"
                        },
                        new
                        {
                            Id = 109L,
                            CountryId = 11L,
                            StateName = "Barda"
                        },
                        new
                        {
                            Id = 110L,
                            CountryId = 11L,
                            StateName = "Beylagan"
                        },
                        new
                        {
                            Id = 111L,
                            CountryId = 12L,
                            StateName = "Nassau"
                        },
                        new
                        {
                            Id = 112L,
                            CountryId = 12L,
                            StateName = "Freeport"
                        },
                        new
                        {
                            Id = 113L,
                            CountryId = 12L,
                            StateName = "West End"
                        },
                        new
                        {
                            Id = 114L,
                            CountryId = 12L,
                            StateName = "Coopers Town"
                        },
                        new
                        {
                            Id = 115L,
                            CountryId = 12L,
                            StateName = "Marsh Harbour"
                        },
                        new
                        {
                            Id = 116L,
                            CountryId = 12L,
                            StateName = "Freetown"
                        },
                        new
                        {
                            Id = 117L,
                            CountryId = 12L,
                            StateName = "Bahamas City"
                        },
                        new
                        {
                            Id = 118L,
                            CountryId = 12L,
                            StateName = "Andros Town"
                        },
                        new
                        {
                            Id = 119L,
                            CountryId = 12L,
                            StateName = "Clarence Town"
                        },
                        new
                        {
                            Id = 120L,
                            CountryId = 12L,
                            StateName = "Dunmore Town"
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlternateEmailAddress");

                    b.Property<string>("AlternatePhoneNumber");

                    b.Property<string>("ContactAddress");

                    b.Property<long>("CourseYearId");

                    b.Property<string>("DateOfBirth")
                        .IsRequired();

                    b.Property<long>("DepartmentId");

                    b.Property<string>("EmailAddress")
                        .IsRequired();

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("Gender");

                    b.Property<string>("IdentityUserId");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("MaritalStatus");

                    b.Property<string>("MatriculationNumber")
                        .IsRequired();

                    b.Property<string>("Middlename")
                        .HasMaxLength(20);

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<string>("ProfilePhotoPath");

                    b.Property<int>("Religion");

                    b.Property<string>("ResidentialAddress")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CourseYearId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.StudentAccademicInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameOfInstitution");

                    b.Property<int>("PreviousLevel");

                    b.Property<long>("StudentId");

                    b.Property<string>("YearEnrolled");

                    b.Property<string>("YearOfGraduation");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAccademicInformations");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.StudentCourse", b =>
                {
                    b.Property<long>("CourseId");

                    b.Property<long>("StudentId");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.StudentNextOfKinInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailOfNextOfKin")
                        .IsRequired();

                    b.Property<string>("NextOfKinFirstname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("NextOfKinLastname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("PhoneOfNextOfKin")
                        .IsRequired();

                    b.Property<int>("RelationToNextOfKin");

                    b.Property<long>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentNextOfKinInformations");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.StudentSponsor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SponsorContactAddress")
                        .IsRequired();

                    b.Property<string>("SponsorEmailAddress")
                        .IsRequired();

                    b.Property<string>("SponsorFirstname")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("SponsorLastname")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("SponsorMiddlename")
                        .HasMaxLength(30);

                    b.Property<string>("SponsorPhoneNumber")
                        .IsRequired();

                    b.Property<string>("SponsorProffession")
                        .IsRequired();

                    b.Property<string>("SponsorWorkAddress")
                        .IsRequired();

                    b.Property<long>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentSponsors");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.StudentTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<long>("LocationId");

                    b.Property<DateTime>("Time");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("StudentTasks");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Teacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DateOfBirth")
                        .IsRequired();

                    b.Property<long>("DepartmentId");

                    b.Property<string>("EmailAddress")
                        .IsRequired();

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("Gender");

                    b.Property<string>("IdentityUserId");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Middlename")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<string>("ProfilePhotoPath");

                    b.Property<int>("Religion");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeacherCertificate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CertificateImagePath");

                    b.Property<string>("CertificateTitle");

                    b.Property<long>("TeacherId");

                    b.Property<long?>("TeachersProffesionalInformationId");

                    b.HasKey("Id");

                    b.HasIndex("TeachersProffesionalInformationId");

                    b.ToTable("TeacherCertificates");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeacherContactInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Address2")
                        .HasMaxLength(100);

                    b.Property<string>("AlternateEmailAddress");

                    b.Property<long>("CountryId");

                    b.Property<string>("EmailOfNextOfKin")
                        .IsRequired();

                    b.Property<string>("HomePhone")
                        .IsRequired();

                    b.Property<string>("MobilePhone");

                    b.Property<string>("NextOfKinFirstname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("NextOfKinLastname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("PhoneOfNextOfKin")
                        .IsRequired();

                    b.Property<int>("RelationToNextOfKin");

                    b.Property<long>("TeacherId");

                    b.Property<int>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherContactInformations");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeacherCourse", b =>
                {
                    b.Property<long>("CourseId");

                    b.Property<long>("TeacherId");

                    b.HasKey("CourseId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherCourses");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeacherHighestDegree", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CGPA");

                    b.Property<string>("DegreeAttained");

                    b.Property<string>("NameOfInstitution");

                    b.Property<long>("TeacherContactInfoId");

                    b.Property<long?>("TeacherContactInformationId");

                    b.Property<string>("YearEnrolled");

                    b.Property<string>("YearOfGraduation");

                    b.HasKey("Id");

                    b.HasIndex("TeacherContactInformationId");

                    b.ToTable("TeacherHighestDegrees");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeacherOtherDegree", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CGPA");

                    b.Property<string>("DegreeAttained");

                    b.Property<string>("NameOfInstitution");

                    b.Property<long>("TeacherHighestDegreeId");

                    b.Property<string>("YearOfEnrollement");

                    b.Property<string>("YearOfGraduation");

                    b.HasKey("Id");

                    b.HasIndex("TeacherHighestDegreeId");

                    b.ToTable("TeacherOtherDegrees");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeacherTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<long>("LocationId");

                    b.Property<DateTime>("Time");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("TeacherTasks");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeachersProffesionalInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Designation");

                    b.Property<string>("FormerPlaceOfEmployment");

                    b.Property<long>("RefereeId");

                    b.Property<long>("TeacherId");

                    b.Property<string>("TeacherRegistrationNumber");

                    b.Property<string>("YearOfDeparture");

                    b.Property<string>("YearOfEmployement");

                    b.Property<int>("YearsOfExperience");

                    b.HasKey("Id");

                    b.HasIndex("RefereeId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeachersProffesionalInformations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Admin", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.AdminTask", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Attendance", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SchoolManagementSystem.Models.CourseYear", "CourseYear")
                        .WithMany()
                        .HasForeignKey("CourseYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SchoolManagementSystem.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Course", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.CourseYear", "CourseYear")
                        .WithMany()
                        .HasForeignKey("CourseYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SchoolManagementSystem.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Department", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Event", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.EventCategory", "EventCategory")
                        .WithMany()
                        .HasForeignKey("EventCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SchoolManagementSystem.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Location", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SchoolManagementSystem.Models.LocationCategory", "LocationCategory")
                        .WithMany()
                        .HasForeignKey("LocationCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Message.Message", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Message.MessageAttachment", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Message.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Message.ReceivedMessage", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.HasOne("SchoolManagementSystem.Models.Message.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.State", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Student", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.CourseYear", "CourseYear")
                        .WithMany()
                        .HasForeignKey("CourseYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SchoolManagementSystem.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.StudentAccademicInformation", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.StudentCourse", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Course", "Course")
                        .WithMany("StudentCourse")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SchoolManagementSystem.Models.Student", "Student")
                        .WithMany("StudentCourse")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.StudentNextOfKinInformation", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.StudentSponsor", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.StudentTask", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Teacher", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeacherCertificate", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.TeachersProffesionalInformation")
                        .WithMany("TeacherCertificates")
                        .HasForeignKey("TeachersProffesionalInformationId");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeacherContactInformation", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SchoolManagementSystem.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeacherCourse", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Course", "Course")
                        .WithMany("TeacherCourse")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SchoolManagementSystem.Models.Teacher", "Teacher")
                        .WithMany("TeacherCourse")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeacherHighestDegree", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.TeacherContactInformation", "TeacherContactInformation")
                        .WithMany()
                        .HasForeignKey("TeacherContactInformationId");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeacherOtherDegree", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.TeacherHighestDegree", "TeacherHighestDegree")
                        .WithMany()
                        .HasForeignKey("TeacherHighestDegreeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeacherTask", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeachersProffesionalInformation", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Referee", "Referee")
                        .WithMany()
                        .HasForeignKey("RefereeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SchoolManagementSystem.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
