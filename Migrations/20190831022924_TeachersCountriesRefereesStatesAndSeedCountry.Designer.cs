// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagementSystem.Data;

namespace SchoolManagementSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190831022924_TeachersCountriesRefereesStatesAndSeedCountry")]
    partial class TeachersCountriesRefereesStatesAndSeedCountry
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b238292-943c-4f67-bfaa-5afe5fcdbe5f",
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "SuperAdmin",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a9da243-688f-4702-8a52-c3d065004ab9",
                            TwoFactorEnabled = false,
                            UserName = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Admin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("IdentityUserId");

                    b.Property<string>("ImagePath");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Firstname = "Anthony",
                            IdentityUserId = "1",
                            Lastname = "Russo"
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CountryName = "Afghanistan"
                        },
                        new
                        {
                            Id = 2L,
                            CountryName = "Albania"
                        },
                        new
                        {
                            Id = 3L,
                            CountryName = "Algeria"
                        },
                        new
                        {
                            Id = 4L,
                            CountryName = "Andorra"
                        },
                        new
                        {
                            Id = 5L,
                            CountryName = "Angola"
                        },
                        new
                        {
                            Id = 6L,
                            CountryName = "Antigua and Barbuda"
                        },
                        new
                        {
                            Id = 7L,
                            CountryName = "Argentina"
                        },
                        new
                        {
                            Id = 8L,
                            CountryName = "Armenia"
                        },
                        new
                        {
                            Id = 9L,
                            CountryName = "Australia"
                        },
                        new
                        {
                            Id = 10L,
                            CountryName = "Austria"
                        },
                        new
                        {
                            Id = 11L,
                            CountryName = "Azerbaijan"
                        },
                        new
                        {
                            Id = 12L,
                            CountryName = "Bahamas"
                        },
                        new
                        {
                            Id = 13L,
                            CountryName = "Bahrain"
                        },
                        new
                        {
                            Id = 14L,
                            CountryName = "Bangladesh"
                        },
                        new
                        {
                            Id = 15L,
                            CountryName = "Barbados"
                        },
                        new
                        {
                            Id = 16L,
                            CountryName = "Belarus"
                        },
                        new
                        {
                            Id = 17L,
                            CountryName = "Belgium"
                        },
                        new
                        {
                            Id = 18L,
                            CountryName = "Belize"
                        },
                        new
                        {
                            Id = 19L,
                            CountryName = "Benin"
                        },
                        new
                        {
                            Id = 20L,
                            CountryName = "Bolivia"
                        },
                        new
                        {
                            Id = 21L,
                            CountryName = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = 22L,
                            CountryName = "Botswana"
                        },
                        new
                        {
                            Id = 23L,
                            CountryName = "Brazil"
                        },
                        new
                        {
                            Id = 24L,
                            CountryName = "Bulgaria"
                        },
                        new
                        {
                            Id = 25L,
                            CountryName = "Burkina Faso"
                        },
                        new
                        {
                            Id = 26L,
                            CountryName = "Burundi"
                        },
                        new
                        {
                            Id = 27L,
                            CountryName = "Côte d'Ivoire"
                        },
                        new
                        {
                            Id = 28L,
                            CountryName = "Cambodia"
                        },
                        new
                        {
                            Id = 29L,
                            CountryName = "Cameroon"
                        },
                        new
                        {
                            Id = 30L,
                            CountryName = "Canada"
                        },
                        new
                        {
                            Id = 31L,
                            CountryName = "Central African Republic"
                        },
                        new
                        {
                            Id = 32L,
                            CountryName = "Chad"
                        },
                        new
                        {
                            Id = 33L,
                            CountryName = "Chile"
                        },
                        new
                        {
                            Id = 34L,
                            CountryName = "China"
                        },
                        new
                        {
                            Id = 35L,
                            CountryName = "Colombia"
                        },
                        new
                        {
                            Id = 36L,
                            CountryName = "Congo (Congo-Brazzaville)"
                        },
                        new
                        {
                            Id = 37L,
                            CountryName = "Costa Rica"
                        },
                        new
                        {
                            Id = 38L,
                            CountryName = "Croatia"
                        },
                        new
                        {
                            Id = 39L,
                            CountryName = "Cuba"
                        },
                        new
                        {
                            Id = 40L,
                            CountryName = "Cyprus"
                        },
                        new
                        {
                            Id = 41L,
                            CountryName = "Czechia (Czech Republic)"
                        },
                        new
                        {
                            Id = 42L,
                            CountryName = "Democratic Republic of the Congo"
                        },
                        new
                        {
                            Id = 43L,
                            CountryName = "Denmark"
                        },
                        new
                        {
                            Id = 44L,
                            CountryName = "Dominican Republic"
                        },
                        new
                        {
                            Id = 45L,
                            CountryName = "Ecuador"
                        },
                        new
                        {
                            Id = 46L,
                            CountryName = "Egypt"
                        },
                        new
                        {
                            Id = 47L,
                            CountryName = "El Salvador"
                        },
                        new
                        {
                            Id = 48L,
                            CountryName = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = 49L,
                            CountryName = "Ethiopia"
                        },
                        new
                        {
                            Id = 50L,
                            CountryName = "Fiji"
                        },
                        new
                        {
                            Id = 51L,
                            CountryName = "Finland"
                        },
                        new
                        {
                            Id = 52L,
                            CountryName = "France"
                        },
                        new
                        {
                            Id = 53L,
                            CountryName = "Gabon"
                        },
                        new
                        {
                            Id = 54L,
                            CountryName = "Gambia"
                        },
                        new
                        {
                            Id = 55L,
                            CountryName = "Georgia"
                        },
                        new
                        {
                            Id = 56L,
                            CountryName = "Germany"
                        },
                        new
                        {
                            Id = 57L,
                            CountryName = "Ghana"
                        },
                        new
                        {
                            Id = 58L,
                            CountryName = "Greece"
                        },
                        new
                        {
                            Id = 59L,
                            CountryName = "Guinea"
                        },
                        new
                        {
                            Id = 60L,
                            CountryName = "Guinea-Bissau"
                        },
                        new
                        {
                            Id = 61L,
                            CountryName = "Haiti"
                        },
                        new
                        {
                            Id = 62L,
                            CountryName = "Honduras"
                        },
                        new
                        {
                            Id = 63L,
                            CountryName = "Hungary"
                        },
                        new
                        {
                            Id = 64L,
                            CountryName = "Iceland"
                        },
                        new
                        {
                            Id = 65L,
                            CountryName = "India"
                        },
                        new
                        {
                            Id = 66L,
                            CountryName = "Indonesia"
                        },
                        new
                        {
                            Id = 67L,
                            CountryName = "Iran"
                        },
                        new
                        {
                            Id = 68L,
                            CountryName = "Iraq"
                        },
                        new
                        {
                            Id = 69L,
                            CountryName = "Ireland"
                        },
                        new
                        {
                            Id = 70L,
                            CountryName = "Israel"
                        },
                        new
                        {
                            Id = 71L,
                            CountryName = "Italy"
                        },
                        new
                        {
                            Id = 72L,
                            CountryName = "Jamaica"
                        },
                        new
                        {
                            Id = 73L,
                            CountryName = "Japan"
                        },
                        new
                        {
                            Id = 74L,
                            CountryName = "Jordan"
                        },
                        new
                        {
                            Id = 75L,
                            CountryName = "Kazakhstan"
                        },
                        new
                        {
                            Id = 76L,
                            CountryName = "Kenya"
                        },
                        new
                        {
                            Id = 77L,
                            CountryName = "Kuwait"
                        },
                        new
                        {
                            Id = 78L,
                            CountryName = "Liberia"
                        },
                        new
                        {
                            Id = 79L,
                            CountryName = "Libya"
                        },
                        new
                        {
                            Id = 80L,
                            CountryName = "Lithuania"
                        },
                        new
                        {
                            Id = 81L,
                            CountryName = "Madagascar"
                        },
                        new
                        {
                            Id = 82L,
                            CountryName = "Malawi"
                        },
                        new
                        {
                            Id = 83L,
                            CountryName = "Malaysia"
                        },
                        new
                        {
                            Id = 84L,
                            CountryName = "Mali"
                        },
                        new
                        {
                            Id = 85L,
                            CountryName = "Mauritania"
                        },
                        new
                        {
                            Id = 86L,
                            CountryName = "Mauritius"
                        },
                        new
                        {
                            Id = 87L,
                            CountryName = "Mexico"
                        },
                        new
                        {
                            Id = 88L,
                            CountryName = "Morocco"
                        },
                        new
                        {
                            Id = 89L,
                            CountryName = "Mozambique"
                        },
                        new
                        {
                            Id = 90L,
                            CountryName = "Myanmar (formerly Burma)"
                        },
                        new
                        {
                            Id = 91L,
                            CountryName = "Namibia"
                        },
                        new
                        {
                            Id = 92L,
                            CountryName = "Nepal"
                        },
                        new
                        {
                            Id = 93L,
                            CountryName = "Netherlands"
                        },
                        new
                        {
                            Id = 94L,
                            CountryName = "New Zealand"
                        },
                        new
                        {
                            Id = 95L,
                            CountryName = "Nicaragua"
                        },
                        new
                        {
                            Id = 96L,
                            CountryName = "Niger"
                        },
                        new
                        {
                            Id = 97L,
                            CountryName = "Nigeria"
                        },
                        new
                        {
                            Id = 98L,
                            CountryName = "North Korea"
                        },
                        new
                        {
                            Id = 99L,
                            CountryName = "Norway"
                        },
                        new
                        {
                            Id = 100L,
                            CountryName = "Oman"
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Referee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("EmailAddress")
                        .IsRequired();

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Organisation")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<long>("TeacherId");

                    b.HasKey("Id");

                    b.ToTable("Referees");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CountryId");

                    b.Property<string>("StateName");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Teacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DateOfBirth")
                        .IsRequired();

                    b.Property<string>("EmailAddress")
                        .IsRequired();

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("Gender");

                    b.Property<string>("IdentityUserId");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Middlename")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<string>("ProfilePhotoPath");

                    b.Property<int>("Religion");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeacherCertificate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CertificateImagePath");

                    b.Property<string>("CertificateTitle");

                    b.Property<long>("TeacherId");

                    b.Property<long?>("TeachersProffesionalInformationId");

                    b.HasKey("Id");

                    b.HasIndex("TeachersProffesionalInformationId");

                    b.ToTable("TeacherCertificates");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeacherContactInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Address2")
                        .HasMaxLength(100);

                    b.Property<string>("AlternateEmailAddress");

                    b.Property<long>("CountryId");

                    b.Property<string>("EmailOfNextOfKin")
                        .IsRequired();

                    b.Property<string>("HomePhone")
                        .IsRequired();

                    b.Property<string>("MobilePhone");

                    b.Property<string>("NextOfKinFirstname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("NextOfKinLastname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("PhoneOfNextOfKin")
                        .IsRequired();

                    b.Property<int>("RelationToNextOfKin");

                    b.Property<long>("TeacherId");

                    b.Property<int>("ZipCode")
                        .HasMaxLength(6);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherContactInformations");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeacherHighestDegree", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CGPA");

                    b.Property<string>("DegreeAttained");

                    b.Property<string>("NameOfInstitution");

                    b.Property<long>("TeacherId");

                    b.Property<string>("YearEnrolled");

                    b.Property<string>("YearOfGraduation");

                    b.HasKey("Id");

                    b.ToTable("TeacherHighestDegrees");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeacherOtherDegree", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CGPA");

                    b.Property<string>("DegreeAttained");

                    b.Property<string>("NameOfInstitution");

                    b.Property<long>("TeacherId");

                    b.Property<string>("YearOfEnrollement");

                    b.Property<string>("YearOfGraduation");

                    b.HasKey("Id");

                    b.ToTable("TeacherOtherDegrees");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeachersProffesionalInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Designation");

                    b.Property<string>("FormerPlaceOfEmployment");

                    b.Property<long>("RefereeId");

                    b.Property<long>("TeacherId");

                    b.Property<string>("TeacherRegistrationNumber");

                    b.Property<string>("YearOfDeparture");

                    b.Property<string>("YearOfEmployement");

                    b.Property<int>("YearsOfExperience");

                    b.HasKey("Id");

                    b.HasIndex("RefereeId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeachersProffesionalInformations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Admin", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.State", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Teacher", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeacherCertificate", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.TeachersProffesionalInformation")
                        .WithMany("TeacherCertificates")
                        .HasForeignKey("TeachersProffesionalInformationId");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeacherContactInformation", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SchoolManagementSystem.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeachersProffesionalInformation", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Referee", "Referee")
                        .WithMany()
                        .HasForeignKey("RefereeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SchoolManagementSystem.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
